---
import HorizontalScroll from '@/components/Icons/HorizontalScroll.astro'
import ColumnPeople from '@/components/People/ColumnPeople.astro'
import PersonBigImages from '@/components/People/PersonBigImages.astro'
import PersonCard from '@/components/People/PersonCard.astro'
import { getPersonById } from '@/lib/get-person'
import type { Person } from '@/types/people'

interface Props {
	people: Person[]
	selectedPerson: Person
}

const { people, selectedPerson } = Astro.props

const firstRow = people.slice(0, 6)
const leftRow = firstRow.slice(0, 3)
const rightRow = firstRow.slice(3)

const secondRow = people.slice(6)
const leftSecondRow = secondRow.slice(0, 4)
const rightSecondRow = secondRow.slice(4, 8)

const animationDelay = [500, 700, 800]
const reverseDelay = [...animationDelay].reverse()

const animationDelaySecondRow = [...animationDelay, 900]
const reverseDelaySecondRow = [...animationDelaySecondRow].reverse()

const peopleIds = people.map(({ id }) => id)
---

<>
	<PersonBigImages people={people} />

	<div
		id="people-selection-container"
		class="relative flex h-full w-full max-w-6xl flex-col items-center justify-end gap-8 sm:p-4"
	>
		<div
			class="hidden w-full flex-wrap justify-center gap-4 px-0 sm:justify-between sm:px-4 md:flex"
		>
			<div class="flex flex-wrap justify-start gap-4">
				{
					leftRow.map(({ id, name }, index) => (
						<div
							class={`animate-fade-in-right animate-duration-slower animate-delay-${animationDelay[index]}`}
						>
							<PersonCard id={id} name={name} class="person-left" />
						</div>
					))
				}
			</div>

			<div class="hidden flex-wrap justify-end gap-4 md:flex">
				{
					rightRow.map(({ id, name }, index) => (
						<div
							class={`animate-fade-in-left animate-duration-slower animate-delay-${reverseDelay[index]}`}
						>
							<PersonCard id={id} name={name} class="person-right" />
						</div>
					))
				}
			</div>
		</div>

		<div class="hidden flex-wrap justify-center gap-4 sm:justify-between md:flex">
			<div class="flex flex-wrap justify-start gap-4">
				{
					leftSecondRow.map(({ id, name }, index) => (
						<div class={`animate-fade-in-up animate-delay-${animationDelaySecondRow[index]}`}>
							<PersonCard id={id} name={name} class="person-left" />
						</div>
					))
				}
			</div>
			<div class="hidden flex-wrap justify-end gap-4 md:flex">
				{
					rightSecondRow.map(({ id, name }, index) => (
						<div class={`animate-fade-in-up animate-delay-${reverseDelaySecondRow[index]}`}>
							<PersonCard id={id} name={name} class="person-right" />
						</div>
					))
				}
			</div>
		</div>
	</div>
	<div class="-mt-20 flex flex-col items-center justify-center md:mt-32 md:hidden">
		<div class="mt-8 w-full max-w-[100vw] overflow-x-scroll">
			<div
				class="fadeout-horizontal no-scrollbar flex snap-x snap-mandatory gap-4 overflow-x-scroll py-2 pr-[40%]"
			>
				{
					peopleIds
						.filter((personId) => personId !== undefined)
						.map((personId, index) => {
							const person = getPersonById(personId)
							return (
								<div
									class:list={`w-fit flex-shrink-0 snap-center px-2 ${index === 0 ? 'ml-[75%]' : ''} `}
								>
									<ColumnPeople person={person} selectedBoxer={selectedPerson} />
								</div>
							)
						})
				}
			</div>
		</div>
		<HorizontalScroll class:list={['text-theme-seashell w-16 pt-2 opacity-80']} />
	</div>
</>

<style>
	.fadeout-horizontal {
		mask-image: linear-gradient(
			to right,
			transparent,
			black 4.5rem,
			black calc(100% - 4.5rem),
			transparent
		);
	}
</style>
